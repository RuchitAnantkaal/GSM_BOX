#include <HardwareSerial.h>
#include <ArduinoJson.h>

// Configure Serial2 pins for GSM module
#define RX2_PIN 16
#define TX2_PIN 17
#define GSM_BAUD 115200

// WebSocket settings
const char* WS_HOST = "65.1.56.164";
const int WS_PORT = 8765;
const char* WS_KEY = "dGhlIHNhbXBsZSBub25jZQ==";

// WebSocket frame opcodes
#define WS_OPCODE_TEXT 0x1
#define WS_OPCODE_PING 0x9
#define WS_OPCODE_PONG 0xA

// Timing settings
const unsigned long MESSAGE_INTERVAL = 1000;    // Send message every 1 second
const unsigned long PING_INTERVAL = 15000;      // Send ping every 15 seconds
const unsigned long COMMAND_TIMEOUT = 1000;     // AT command timeout
const unsigned long RECONNECT_DELAY = 2000;     // Delay between reconnection attempts

// Error handling settings
const int MAX_RETRIES = 5;           // Maximum errors before reset
int errorCount = 0;                  // Counter for errors
unsigned long lastDataTime = 0;      // Track last successful data transfer

#define MAX_INIT_ATTEMPTS 5
#define MAX_NETWORK_RETRIES 3
const unsigned long EXTENDED_TIMEOUT = 5000;     // Extended timeout for critical operations
const unsigned long NETWORK_RETRY_DELAY = 2000;  // Delay between network retry attempts
const unsigned long CONNECTION_WATCHDOG = 45000; // Extended watchdog timeout

// Global variables
HardwareSerial GSMSerial(2);
String response = "";
unsigned long lastMessageTime = 0;
unsigned long lastPingTime = 0;

// Function to send AT command and get response
String sendATCommand(const char* command, unsigned long waitTime = COMMAND_TIMEOUT) {
    response = "";
    GSMSerial.println(command);
    Serial.print("Sending: ");
    Serial.println(command);
    
    unsigned long startTime = millis();
    while ((millis() - startTime) < waitTime) {
        if (GSMSerial.available()) {
            char c = GSMSerial.read();
            response += c;
            Serial.write(c);
            if (response.indexOf("OK") != -1 || response.indexOf("ERROR") != -1) {
                break;
            }
        }
    }
    return response;
}

// Function to perform software reset
void softwareReset() {
    Serial.println("Performing software reset...");
    delay(1000);
    ESP.restart();
}

// Function to check device information
bool checkDeviceInfo() {
    Serial.println("\n--- Checking Device Information ---");
    
    for(int i = 0; i < 3; i++) {
        String atResponse = sendATCommand("AT");
        if (atResponse.indexOf("OK") != -1) {
            // Detailed device information gathering
            String modelResponse = sendATCommand("AT+CGMM");  // Model
            String firmwareResponse = sendATCommand("AT+CGMR");  // Firmware
            String imeiResponse = sendATCommand("AT+CGSN");  // IMEI
            
            Serial.println("Device Model: " + modelResponse);
            Serial.println("Firmware Version: " + firmwareResponse);
            Serial.println("IMEI: " + imeiResponse);
            
            Serial.println("Device Information Check Passed");
            return true;
        }
        delay(1000);
    }
    
    Serial.println("Error: Module not responding");
    return false;
}

// Function to check SIM status
bool checkSIMStatus() {
    Serial.println("\n--- Checking SIM Status ---");
    
    // Check PIN status
    String simResponse = sendATCommand("AT+CPIN?");
    if (simResponse.indexOf("+CPIN: READY") == -1) {
        Serial.println("Error: SIM not ready");
        return false;
    }
    
    // Check signal quality
    String signalResponse = sendATCommand("AT+CSQ");
    int signalStrength = signalResponse.substring(
        signalResponse.indexOf("+CSQ: ") + 6, 
        signalResponse.indexOf(",")
    ).toInt();
    Serial.print("Signal Strength: ");
    Serial.println(signalStrength);
    
    // Check network registration
    String regResponse = sendATCommand("AT+CREG?");
    bool networkRegistered = (
        regResponse.indexOf("+CREG: 0,1") != -1 || 
        regResponse.indexOf("+CREG: 0,5") != -1
    );
    
    if (!networkRegistered) {
        Serial.println("Error: Not registered to network");
        return false;
    }
    
    // Additional network information
    sendATCommand("AT+CSQ");     // Signal quality
    sendATCommand("AT+COPS?");   // Current operator
    
    Serial.println("SIM Status Check Passed");
    return true;
}
// Function to initialize network connection
bool initializeNetwork() {
    Serial.println("\n--- Initializing Network ---");
    
    // Close any existing connections
    sendATCommand("AT+CIPCLOSE=0");
    sendATCommand("AT+NETCLOSE");
    delay(1000);
    
    // Check and activate PDP context with more robust logic
    for(int i = 0; i < MAX_NETWORK_RETRIES; i++) {
        Serial.printf("Network Initialization Attempt %d/%d\n", i + 1, MAX_NETWORK_RETRIES);
        
        // Attempt to activate context
        String cgactResponse = sendATCommand("AT+CGACT=1,1", 10000);
        
        // Open network
        String netopenResponse = sendATCommand("AT+NETOPEN", 10000);
        
        // Verify network status
        String netStatusResponse = sendATCommand("AT+NETOPEN?");
        
        // Check IP address
        String ipResponse = sendATCommand("AT+IPADDR");
        
        if (netStatusResponse.indexOf("+NETOPEN: 1") != -1 && 
            ipResponse.indexOf("+IPADDR:") != -1) {
            Serial.println("Network Initialization Successful");
            return true;
        }
        
        delay(NETWORK_RETRY_DELAY);
    }
    
    Serial.println("Error: Cannot initialize network");
    return false;
}

// Function to establish WebSocket connection
bool establishWebSocket() {
    Serial.println("\n--- Establishing WebSocket Connection ---");
    
    // Open TCP connection
    String cmd = "AT+CIPOPEN=0,\"TCP\",\"" + String(WS_HOST) + "\"," + String(WS_PORT);
    String tcpResponse = sendATCommand(cmd.c_str(), EXTENDED_TIMEOUT);
    
    if (tcpResponse.indexOf("OK") == -1) {
        Serial.println("TCP Connection Failed");
        return false;
    }
    
    // Wait for connection confirmation
    unsigned long startTime = millis();
    bool connectionConfirmed = false;
    
    while ((millis() - startTime) < EXTENDED_TIMEOUT) {
        if (GSMSerial.available()) {
            String resp = GSMSerial.readString();
            Serial.print("Connection Response: ");
            Serial.println(resp);
            
            if (resp.indexOf("+CIPOPEN: 0,0") != -1) {
                connectionConfirmed = true;
                break;
            }
        }
        delay(10);
    }
    
    if (!connectionConfirmed) {
        Serial.println("TCP Connection Confirmation Timeout");
        return false;
    }
    
    // Create WebSocket handshake (keep original handshake logic)
    String handshake = "GET / HTTP/1.1\r\n";
    handshake += "Host: " + String(WS_HOST) + ":" + String(WS_PORT) + "\r\n";
    handshake += "Upgrade: websocket\r\n";
    handshake += "Connection: Upgrade\r\n";
    handshake += "Sec-WebSocket-Key: " + String(WS_KEY) + "\r\n";
    handshake += "Sec-WebSocket-Version: 13\r\n";
    handshake += "\r\n";
    
    // Send handshake
    String sendCmd = "AT+CIPSEND=0," + String(handshake.length());
    if (sendATCommand(sendCmd.c_str(), 2000).indexOf(">") != -1) {
        GSMSerial.print(handshake);
        
        // Wait for handshake response
        startTime = millis();
        String handshakeResponse = "";
        
        while ((millis() - startTime) < 5000) {
            if (GSMSerial.available()) {
                char c = GSMSerial.read();
                handshakeResponse += c;
                Serial.write(c);
                
                if (handshakeResponse.indexOf("101 Switching Protocols") != -1) {
                    Serial.println("\nWebSocket connection established!");
                    lastDataTime = millis();
                    return true;
                }
            }
        }
    }
    
    Serial.println("WebSocket handshake failed");
    return false;
}

// Function to check if connection is valid
bool isConnectionValid() {
    // First check if module is responsive
    if (sendATCommand("AT").indexOf("OK") == -1) {
        return false;
    }
    
    // Check network registration
    String regStatus = sendATCommand("AT+CREG?");
    if (regStatus.indexOf("+CREG: 0,1") == -1 && regStatus.indexOf("+CREG: 0,5") == -1) {
        return false;
    }
    
    // Check PDP context
    String pdpStatus = sendATCommand("AT+CGACT?");
    if (pdpStatus.indexOf("+CGACT: 1,1") == -1) {
        return false;
    }
    
    // Check network status
    String netStatus = sendATCommand("AT+NETOPEN?");
    if (netStatus.indexOf("+NETOPEN: 1") == -1) {
        return false;
    }
    
    return true;
}

// Function to handle reconnection
bool handleReconnection() {
    Serial.println("Checking connection status...");
    
    if (isConnectionValid()) {
        Serial.println("Base connection valid, re-establishing WebSocket...");
        if (establishWebSocket()) {
            errorCount = 0;
            return true;
        }
    }
    
    Serial.println("Connection invalid, performing full reset...");
    
    // Close existing connections
    sendATCommand("AT+CIPCLOSE=0", 1000);
    sendATCommand("AT+NETCLOSE", 1000);
    delay(RECONNECT_DELAY);
    
    // Try full reconnection sequence
    for (int i = 0; i < MAX_INIT_ATTEMPTS; i++) {
        Serial.printf("Reconnection attempt %d/%d\n", i + 1, MAX_INIT_ATTEMPTS);
        
        if (initializeNetwork() && establishWebSocket()) {
            errorCount = 0;
            Serial.println("Reconnection successful");
            return true;
        }
        delay(RECONNECT_DELAY);
    }
    
    Serial.println("Reconnection failed");
    return false;
}

// Function to handle connection errors
void handleConnectionError() {
    errorCount++;
    Serial.printf("Connection error #%d of %d\n", errorCount, MAX_RETRIES);
    
    if (errorCount >= MAX_RETRIES) {
        Serial.println("Max retries reached! Performing software reset...");
        softwareReset();
        return;
    }
    
    if (!handleReconnection()) {
        errorCount = MAX_RETRIES;  // Force reset on next error
    }
}

// Function to send WebSocket frame
bool sendWebSocketFrame(const uint8_t* payload, size_t length, uint8_t opcode) {
    if(length > 125) return false;

    // Prepare frame
    size_t frameSize = 6 + length;
    uint8_t* frame = new uint8_t[frameSize];
    
    // Generate mask key
    uint8_t maskKey[4];
    for(int i = 0; i < 4; i++) maskKey[i] = random(0, 256);
    
    // Create frame header
    frame[0] = 0x80 | (opcode & 0x0F);
    frame[1] = 0x80 | (length & 0x7F);
    memcpy(frame + 2, maskKey, 4);
    
    // Copy and mask payload
    if (length > 0 && payload != nullptr) {
        memcpy(frame + 6, payload, length);
        for(size_t i = 0; i < length; i++) {
            frame[i + 6] ^= maskKey[i % 4];
        }
    }
    
    // Send frame
    String sendCmd = "AT+CIPSEND=0," + String(frameSize);
    bool success = false;
    
    if (sendATCommand(sendCmd.c_str(), 1000).indexOf(">") != -1) {
        GSMSerial.write(frame, frameSize);
        
        unsigned long startTime = millis();
        while ((millis() - startTime) < 1000) {
            if (GSMSerial.available()) {
                String resp = GSMSerial.readString();
                if (resp.indexOf("OK") != -1) {
                    success = true;
                    lastDataTime = millis();
                    break;
                } else if (resp.indexOf("ERROR") != -1 || resp.indexOf("CIPERROR") != -1) {
                    handleConnectionError();
                    break;
                }
            }
        }
    } else {
        handleConnectionError();
    }
    
    delete[] frame;
    return success;
}

// Function to send custom data
bool sendSensorData(const char* name, float value) {
    StaticJsonDocument<64> doc;
    doc["name"] = name;
    doc["value"] = value;
    
    String jsonString;
    serializeJson(doc, jsonString);
    
    return sendWebSocketFrame((uint8_t*)jsonString.c_str(), jsonString.length(), WS_OPCODE_TEXT);
}

void setup() {
    Serial.begin(115200);
    GSMSerial.begin(GSM_BAUD, SERIAL_8N1, RX2_PIN, TX2_PIN);
    randomSeed(analogRead(0));
    delay(1000);  // Wait for GSM module to stabilize
    
    Serial.println("\nESP32 GSM WebSocket Client Test");
    
    // More robust initialization sequence
    bool initialized = false;
    for(int i = 0; i < MAX_INIT_ATTEMPTS; i++) {
        Serial.printf("Initialization Attempt %d/%d\n", i + 1, MAX_INIT_ATTEMPTS);
        
        if (checkDeviceInfo() && 
            checkSIMStatus() && 
            initializeNetwork() && 
            establishWebSocket()) {
            initialized = true;
            break;
        }
        
        delay(NETWORK_RETRY_DELAY);
    }
    
    if (!initialized) {
        Serial.println("Initialization Failed. Performing Software Reset.");
        softwareReset();
        return;
    }
    
    lastMessageTime = millis();
    lastPingTime = millis();
    lastDataTime = millis();
}

void loop() {
    // Extended connection watchdog
    if (millis() - lastDataTime > CONNECTION_WATCHDOG) {
        Serial.println("Connection Watchdog Timeout");
        handleConnectionError();
        lastDataTime = millis();
        return;
    }
    
    // Handle incoming data
    while (GSMSerial.available()) {
        String data = GSMSerial.readString();
        Serial.print(data);
        lastDataTime = millis();
        
        // Connection loss detection
        if (data.indexOf("+IPCLOSE") != -1 || data.indexOf("ERROR") != -1) {
            handleConnectionError();
            return;
        }
        
        // Ping handling
        if (data.indexOf("ping") != -1) {
            if (!sendWebSocketFrame((uint8_t*)"pong", 4, WS_OPCODE_PONG)) {
                handleConnectionError();
            }
        }
    }
    
    // Periodic data sending
    if (millis() - lastMessageTime >= MESSAGE_INTERVAL) {
        if (sendSensorData("x", 100)) {
            Serial.println("Sent custom data: x = 100");
        }
        lastMessageTime = millis();
    }
    
    // Maintain connection with pings
    if (millis() - lastPingTime >= PING_INTERVAL) {
        sendWebSocketFrame((uint8_t*)"ping", 4, WS_OPCODE_PING);
        lastPingTime = millis();
    }
    
    delay(10);
}




